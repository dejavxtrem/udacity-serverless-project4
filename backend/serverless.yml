service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  # we use serverless reqvalidator and server documentation plugin to validate incoming http request using jsonschema
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  

provider:
  tracing:
    lambda: true
    apiGateway: true
  name: aws
  runtime: nodejs12.x
  # it uses the options "dev" if an option is not provided in  the CLI setup
  stage: ${opt:stage, 'dev'}
  #it uses the options "us-east-2" if an option is not provided in the CLI setup
  region: ${opt:region, 'us-east-2'}
  # deploymentBucket:
  #   skipPolicySetup: true

  #Global variables setup
  environment:
    # The DynamoDB table have unique names. They need to be unique per account per region
    # Names are UTF-8 encoded, case-sensitive and should be between 3 and 255 charaters long
    TODOS_TABLE: ${self:service.name}-Todos-${self:provider.stage}
    TODOS_IMAGES_S3_BUCKET: ${self:service.name}-images-${self:provider.stage}
    TODOS_SIGNED_URL_EXPIRATION: 900
    INDEX_NAME: dueDate

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo Api
        description: Serverless Application with CRUD abilities for Todos
    models:
      - name: CreateTodo
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: UpdateTodo
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}
    

    
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          cors: true
          documentation:
            summary: Create a new todo Item
            description: Create a todo item
            requestModels:
              'application/json': CreateTodo

    iamRoleStatements:
      # TODOS_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
            

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          documentation:
            summary: Update a todo item
            description: update a todo item
            requestModels:
              'application/json': UpdateTodo
    
       
    iamRoleStatements:
      # TODOS_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}


          
  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true



    iamRoleStatements:
      # TODOS_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_IMAGES_S3_BUCKET}/*


  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          cors: true
    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

resources:
  Resources:
    # Add DynamoDB Table Definition
    # DynamoDB is schemaless, we need to define only the primary key and global secondary keys.
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # single id field of type string which is the partition key
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        # so, we set the simple primary key as hash key
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
  
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODOS_IMAGES_S3_BUCKET}
        # important so S3 can send the correct CORS HEADERS
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000        
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              # allows for anybody '*' to get objects of our s3 bucket
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_IMAGES_S3_BUCKET}/*'
        # specify which bucket this bucketPolicy should be applied
        Bucket: AttachmentsBucket          
              


# Addtional Resources to validate  incoming request using the json schema
  # RequestBodyValidator:
  #     Type: AWS::ApiGateway::RequestValidator
  #     # we need a name and an id of the api which we will use
  #     Properties:
  #       Name: 'request-body-validator'
  #       RestApiId:
  #         Ref: ApiGatewayRestApi
  #       # it only validate body requests and not request parameters
  #       ValidateRequestBody: true
  #       ValidateRequestParameters: false 